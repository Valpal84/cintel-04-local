[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shiny import render, reactive\nfrom shinywidgets import render_plotly\nimport palmerpenguins\nimport seaborn as sns\n\nui.page_opts(title=\"Filling layout\", fillable=True)\nwith ui.layout_columns():\n\n    @render_plotly\n    def plot1():\n        return px.histogram(px.data.tips(), y=\"tip\")\n\n    @render_plotly\n    def plot2():\n        return px.histogram(px.data.tips(), y=\"total_bill\")\n\n\npenguins_df = palmerpenguins.load_penguins()\n\nui.page_opts(title=\"Valerie's Penguin Data\", fillable=True)\n\n# Sidebar content\n\nwith ui.sidebar():\n    ui.h2(\"Sidebar\")\n    ui.input_selectize(\n        \"Selected_attribute\",\n        \"Penguin  Details\",\n        [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n    )\n    ui.input_numeric(\"plotly_bin_count\", \"Bin_count\", 1, min=1, max=15)\n    ui.input_slider(\"seaborn_bin_count\", \"Seaborn bin count\", 1, 100, 20)\n    ui.input_checkbox_group(\n        \"selected_species_group\",\n        \"select species\",\n        [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n        selected=[\"Adelie\"],\n        inline=True,\n    )\n    ui.hr()\n    ui.a(\n        \"Valerie's GitHub Repository\",\n        href=\"https://github.com/Valpal84/cintel-02-data\",\n        target=\"_blank\",\n    )\n\n# Main area content\n\n# Display a data table and data grid in the main content area.\nwith ui.layout_columns():\n    with ui.navset_card_pill(id=\"tab1\"):\n        with ui.nav_panel(\"Data Table\"):\n\n            @render.data_frame\n            def penguins_data_table():\n                return render.DataTable(filtered_data())\n\n        with ui.nav_panel(\"Data Grid\"):\n\n            @render.data_frame\n            def penguins_data_grid():\n                return render.DataGrid(filtered_data())\n\n    # Display a plotly histogram showing all species\n    with ui.navset_card_pill(id=\"tab2\"):\n        with ui.nav_panel(\"Penguin Histogram\"):\n\n            @render_plotly\n            def plotly_histogram():\n                plotly_hist = px.histogram(\n                    data_frame=filtered_data(),\n                    x=input.Selected_attribute(),\n                    nbins=input.plotly_bin_count(),\n                    color=\"species\",\n                ).update_layout(\n                    title=\"Penguins Plotly Data\",\n                    xaxis_title=\"Selected Attribute\",\n                    yaxis_title=\"Count\",\n                )\n                return plotly_hist\n\n    # Display a seaborn histogram showing all species\n    with ui.navset_card_pill(id=\"tab3\"):\n        with ui.nav_panel(\"Seaborn Penguin Histogram\"):\n            @render.plot\n            def seaborn_histogram():\n               histplot = sns.histplot(data=filtered_data(), x=\"body_mass_g\", hue=\"species\", bins=input.seaborn_bin_count())\n               histplot.set_title(\"Palmer Penguins\")\n               histplot.set_xlabel(\"Mass\")\n               histplot.set_ylabel(\"Count\")\n               sns.set_style('darkgrid')\n               return histplot \n\n    # Display a plotly Scatterplot showing all species\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Scatterplot: Species\")\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(\n                filtered_data(),\n                x=\"body_mass_g\",\n                y=\"bill_depth_mm\",\n                color=\"species\",\n                color_discrete_map={\n                    'Adelie': 'purple',\n                    'Chinstrap': 'green',\n                    'Gentoo': 'yellow'},\n            )\n                \n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    return penguins_df[penguins_df[\"species\"].isin(input.selected_species_group())]\n", "type": "text"}]